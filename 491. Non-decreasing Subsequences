class Solution {
private:
    void req_subseq(set<vector<int>>& result, vector<int> nums, vector<int>& curr_subseq, int index){
        if(index==nums.size()){
            if(curr_subseq.size()>1)result.insert(curr_subseq);
            return;
        }
        int curr = nums[index], prev;
        prev = (curr_subseq.size() == 0)? -101 : curr_subseq[curr_subseq.size()-1];
        if(curr>=prev){
            req_subseq(result, nums, curr_subseq, index+1);
            curr_subseq.push_back(nums[index]);
            req_subseq(result, nums, curr_subseq, index+1);
            curr_subseq.pop_back();
        }else{
            req_subseq(result, nums, curr_subseq, index+1);
        }
    }
public:
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        set<vector<int>> result;
        vector<vector<int>> ans;
        vector<int> curr_subseq;
        req_subseq(result, nums, curr_subseq, 0);
        set<vector<int>>::iterator itr;
        for (itr = result.begin();itr != result.end(); itr++){
            ans.push_back(*itr);
        }
        return ans;
    }
};
