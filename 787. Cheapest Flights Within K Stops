
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& edges, int st, int en, int k) {
        vector<int> price(n, 1e9);
        vector<vector<pair<int, int>>> adj(n);
        queue<pair<int, pair<int, int>>> q;
        for (vector<int>& v : edges) 
            adj[v[0]].push_back({v[1], v[2]});
        q.push({st, {0, 0}});
        price[st] = 0;
        while (!q.empty()) {
            int cur = q.front().first;
            int curprice = q.front().second.first;
            int moves = q.front().second.second;
            q.pop();
            if (moves > k)
                continue;
            for (pair<int, int>& p : adj[cur]) {
                if (price[p.first] <= curprice + p.second)
                    continue;
                q.push({p.first, {curprice + p.second, moves + 1}});
                price[p.first] = curprice + p.second;
            }
        }
        return price[en] == 1e9 ? -1 : price[en];
    }
};
// class Solution {
// public:
//     void dfs(vector<vector<int>> cost, int src, int dst, int k, int count, vector<int>& vec, vector<bool>& visited){
//         int n=cost.size();
//         if(cost[src][dst]!=-1){
//             if(count<=k){
//                 vec.push_back(cost[src][dst]);
//                 return;
//             }
//             return;
//         }
//         visited[src]=true;
//         for(int i=0;i<n;i++){
//             if(cost[src][i]!=-1 && !visited[i]){
//                 dfs(cost, i, dst, k, count+1, vec, visited);                
//             }
//         }
//         return;
//     }
//     int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
//         vector<vector<int>> cost;
//         for(int i=0;i<n;i++){
//             vector<int> v(n, -1);
//             cost[i].push_back(v);
//         }
//         for(int i=0;i<flights.size();i++){
//             cost[flights[i][0]][flights[i][1]]=flights[i][2];
//         }
//         vector<bool> visited(n, false);
//         vector<int> ans;
//         dfs(cost, src, dst, k, 0, ans, visited);
//         if(ans.size()==0)return -1;
//         int result=INT_MAX;
//         for(int i=0;i<ans.size();i++){
//             result = min(result, ans[i]);
//         }
//         return result;
//     }
// };
