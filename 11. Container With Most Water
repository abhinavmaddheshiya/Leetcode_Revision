class Solution {
public:
    int maxArea(vector<int>& height) {
        int left = 0;
        int right = height.size() - 1;
        int maxArea = 0;

        while (left < right) {
            int currentArea = min(height[left], height[right]) * (right - left);
            maxArea = max(maxArea, currentArea);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;
    }
};
/*class Solution {
public:
    int maxArea(vector<int>& height) {
        int n=height.size();
        stack<int> st1, st2;
        for(int i=0;i<n;i++){
            if(st1.empty())st1.push(i);
            else if(height[i]>height[st1.top()])st1.push(i);
        }
        for(int i=n-1;i>=0;i--){
            if(st2.empty())st2.push(i);
            else if(height[i]>height[st2.top()])st2.push(i);
        }
        int maxArea=0;
        while(!st1.empty() && !st2.empty()){
            int left=st1.top(), right=st2.top();
            stack<int> cpy1=st1;
            stack<int> cpy2=st2;
            while(!cpy1.empty()){
                int dist=right-cpy1.top();
                maxArea=max(maxArea, dist*min(height[cpy1.top()], height[right]));
                cpy1.pop();
            }
            while(!cpy2.empty()){
                int dist=cpy2.top()-left;
                maxArea=max(maxArea, dist*min(height[left], height[cpy2.top()]));
                cpy2.pop();
            }
            st1.pop(), st2.top();
        }
        return maxArea;
    }
};*/
