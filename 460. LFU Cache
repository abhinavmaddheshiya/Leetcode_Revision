struct node{
    int key;
    int value;
    int tracefreq;
    node* next;
    node* prev;
    node(int _key, int _value){
        key = _key;
        value = _value;
        tracefreq=1;
    }
};
struct List{
    int size;
    node* head;
    node* tail;
    List(){
        head = new node(-1, -1);
        tail = new node(-1, -1);
        head->next = tail;
        tail->prev = head;
        size=0;
    }
    void addnode(node* newnode){
        node* temp = head->next;
        newnode->next=temp;
        newnode->prev=head;
        head->next = newnode;
        temp->prev=newnode;
        size++;
    }
    void deletenode(node *delnode){
        node* delnodenext=delnode->next;
        node* delnodeprev=delnode->prev;
        delnodeprev->next=delnodenext;
        delnodenext->prev=delnodeprev;
        size--;
    }
};
class LFUCache {
public:
    unordered_map<int, List*> freqlist;
    unordered_map<int, node*> keynode;
    int capacity;
    int minfreq;
    int minsize;
    LFUCache(int capacity) {
        this->capacity=capacity;
        this->minfreq=1;
        this->minsize=0;
    }
    void updatefreqlist(node *curr){
        keynode.erase(curr->key);
        int frq = curr->tracefreq;
        freqlist[frq]->deletenode(curr);
        if(minfreq==frq && freqlist[frq]->size==0){
            minfreq++;
        }
        List* currlist = new List();
        if(freqlist.count(frq+1)){
            currlist = freqlist[frq+1];
        }
        curr->tracefreq+=1;
        currlist->addnode(curr);
        freqlist[curr->tracefreq]=currlist;
        keynode[curr->key]=curr;
    }
    int get(int key) {
        if(keynode.count(key)){
            node* current = keynode[key];
            int val = current->value;
            updatefreqlist(current);
            return val;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(capacity==0)return;
        if(keynode.count(key)){
            node* curr = keynode[key];
            curr->value=value;
            updatefreqlist(curr);
        }else{
            if(minsize==capacity){
                keynode.erase(freqlist[minfreq]->tail->prev->key);
                freqlist[minfreq]->deletenode(freqlist[minfreq]->tail->prev);
                minsize--;
            }
            minsize++;
            minfreq=1;
            node* newnode = new node(key, value);
            keynode[key]=newnode;
            List* currlist = new List();
            if(freqlist.count(minfreq)){
                currlist=freqlist[minfreq];
            }
            currlist->addnode(newnode);
            freqlist[minfreq]=currlist;
            keynode[key]=newnode;
        }
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
