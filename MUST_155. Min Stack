class MinStack {
private:
    stack<int> st1;
    stack<int> st2;
public:
    MinStack() {
    }
    
    void push(int val) {
        st1.push(val);
        if(st2.empty() || st2.top()>=val)st2.push(val);
    }
    
    void pop() {
        if(st2.top() == st1.top())st2.pop();
        st1.pop();
    }
    
    int top() {
        return st1.top();
    }
    
    int getMin() {
        return st2.top();
    }
};
/*
space complexity = O(n)
class MinStack {
public:
    stack<long long> v;
    long long mini;
    MinStack() {
        mini=INT_MAX;
    }
    
    void push(int val) {
        long long value=val;
        if(v.empty()){
            mini=value;
            v.push(value);   
        }
        else if(mini>value){
            long long temp = (2*value)-mini;
            mini=value;
            v.push(temp);
        }else{
            v.push(value);
        }
    }
    
    void pop() {
        if(mini>v.top()){
            mini = (2*mini)-v.top();
        }
        v.pop();
    }
    
    int top() {
        if(mini>v.top()){
            return mini;
        }
        return v.top();
    }
    
    int getMin() {
        return mini;
    }
};
*/

class MinStack {
public:
    pair<int, int> p;
    vector<pair<int, int>> v;
    MinStack() {
    }
    
    void push(int val) {
        if(v.size()==0){
            v.push_back({val, val});
        }else{
            pair<int, int> temp = v[v.size()-1];
            if(val<temp.second)v.push_back({val, val});
            else{
                v.push_back({val, temp.second});
            }
        }
    }
    
    void pop() {
        v.pop_back();
    }
    
    int top() {
        return v[v.size()-1].first;
    }
    
    int getMin() {
        return v[v.size()-1].second;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
