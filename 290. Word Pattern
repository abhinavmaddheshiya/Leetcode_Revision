class Solution {
public:
    bool wordPattern(string pattern, string s) {
        int start=0;
        unordered_map<char, string> mp;
        unordered_map<string, char> pm;
        char space = ' ';
        char nu = '\0';
        int p = 0;
        for(int i=0;i<=s.size();i++){
            if(s[i]==space || s[i]==nu){
                string curr="";
                for(int j=start;j<i;j++){
                    curr+=s[j];
                }
                pair<char, string> store1(pattern[p], curr);
                pair<string, char> store2(curr, pattern[p]);
                if(mp.count(pattern[p])>0 && mp[pattern[p]]!=curr)return false;
                if(pm.count(curr)>0 && pm[curr]!=pattern[p])return false;
                mp[pattern[p]]=curr;
                pm[curr]=pattern[p];
                start=i+1;
                p++;
            }
        }
        if(p!=pattern.size())return false;
        return true;
    }
};
