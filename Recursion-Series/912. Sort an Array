// https://youtu.be/WIrA4YexLRQ
class Solution {
public:
    int partition(int l, int h, vector<int>& nums){
        int pivot=nums[l], i=l, j=h;
        while(i<j){
            while(nums[i]<=pivot && i<=h-1)i++;
            while(pivot<nums[j] && j>=l+1)j--;
            if(i<j)swap(nums[i], nums[j]);
        }
        swap(nums[l], nums[j]);
        return j;
    }
    void quickSort(int l, int h, vector<int>& nums) {
        if(l<h){
            int pivotInd=partition(l, h, nums);
            quickSort(l, pivotInd-1, nums);
            quickSort(pivotInd+1, h, nums);
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        quickSort(0, nums.size()-1, nums);
        return nums;
    }
};
