class LRUCache {
    class node {
    public:
        int key;
        int value;
        node *next;
        node *prev;

        node(int key, int value){
            this->key = key;
            this->value = value;
            next=NULL;
            prev=NULL;
        }
    };
    unordered_map<int, node*> kn;
    node *head = new node(-1, -1);
    node *tail = new node(-1, -1);
    int capacity;
public:
    LRUCache(int capacity) {
        head->next=tail;
        tail->prev=head;
        this->capacity=capacity;
    }
    void addnode(node* newnode){
        node *temp = head->next;
        head->next=newnode;
        newnode->next=temp;
        newnode->prev=head;
        temp->prev=newnode;
    }    
    void deletenode(node* del){
        node *delprev = del->prev;
        node *delnext = del->next;
        delprev->next=delnext;
        delnext->prev=delprev;
    }
    int get(int key) {
        if(kn.count(key)){
            node *del = kn[key];
            deletenode(del);
            addnode(del);
            return kn[key]->value;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(kn.count(key)){
            node *exisitingnode = kn[key];
            kn.erase(key);
            deletenode(exisitingnode);
        }
        if(kn.size()==capacity){
            kn.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        node *newnode = new node(key, value);
        addnode(newnode);
        kn[key]=newnode;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
